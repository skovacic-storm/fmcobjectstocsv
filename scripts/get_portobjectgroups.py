#!/usr/bin/env python3

"""
Exports FMC port object groups from API to fmc_portobjectgroups.json file

Args:
        output_file (str): /export/fmc_portobjectgroups.json

Returns:
    None: This script doesn't return a value, but creates an output file.

Output File Format:
    JSON file: fmc_portobjectgroups.json, JSON file with exported data
"""

__author__ = "Sasa Kovacic"
__email__ = "sasa.kovacic@storm.hr"
__version__ = "1.0"


import os
import requests
import json
import time
from dotenv import load_dotenv

load_dotenv()

hostname = os.getenv('FMC_HOST')
accesspolicy_id = os.getenv('FMC_ACCESS_POLICY_ID')
domain_id = os.getenv('FMC_DOMAIN_ID')
auth_token = os.getenv('FMC_TOKEN')  # Load the token generated by get_token.py

protocol = "https"
filename = "export/fmc_portobjectgroups.json"

import warnings
from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Suppress only the single InsecureRequestWarning from urllib3 needed
warnings.simplefilter('ignore', InsecureRequestWarning)

# Function to get PortObjectGroups from Object with pagination and retry mechanism
def get_portobjectgroups(protocol, hostname, domain_id, auth_token):
    url_template = f"{protocol}://{hostname}/api/fmc_config/v1/domain/{domain_id}/object/portobjectgroups?expanded=True&offset={{offset}}&limit={{limit}}"
    offset = 0
    limit = 1000  # Number of items to return in each request
    all_items = []
    
    while True:
        url = url_template.format(offset=offset, limit=limit)
        
        # Define the headers
        headers = {
            'Content-Type': 'application/json',
            'X-auth-access-token': auth_token # Use the token retrieved by get_token.py
        }
        
        try:
            # Make the GET request
            response = requests.get(url, headers=headers, verify=False)
            
            # Check if the request was successful
            if response.status_code == 200:
                data = response.json()
                items = data.get('items', [])
                all_items.extend(items)
                
                if len(items) < limit:
                    # If fewer items than limit are returned, this is the last page
                    break
                else:
                    offset += limit  # Move to the next page
            
            elif response.status_code == 429:
                print(f"Rate limit exceeded. Retrying in {sleep_time} seconds...")
                sleep_time = 120
                time.sleep(sleep_time)
                
            else:
                #print(f"Failed to get PortObjectGroups: {response.status_code}")
                print("Failed to get PortObjectGroups: token expired, please login again")
                print(response.text)
                return None
        except requests.RequestException as e:
            print(f"An error occurred: {e}")
            return None
    
    return all_items

# Function to save data to JSON
def save_to_json(data, filename):
    try:
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)
        print(f"Data successfully saved to {filename}")
    except Exception as e:
        print(f"An error occurred while saving to {filename}: {e}")

def retrieve_and_save_portobjectgroups(protocol, hostname, domain_id, auth_token, filename):
    # Get PortObjectGroups
    portobjectgroups = get_portobjectgroups(protocol, hostname, domain_id, auth_token)
        
    if portobjectgroups:
        print("PortObjectGroups retrieved successfully.")
        save_to_json({"items": portobjectgroups}, filename)
    else:
        print("Failed to retrieve PortObjectGroups.")

if __name__ == "__main__":
    # Use the token loaded from the .env file
    if auth_token:
        retrieve_and_save_portobjectgroups(protocol, hostname, domain_id, auth_token, filename)
    else:
        print("No token found. Please run get_token.py to generate a token.")